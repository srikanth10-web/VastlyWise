generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  username      String         @unique
  createdAt     DateTime       @default(now())
  firstName     String
  isAdmin       Boolean        @default(false)
  lastName      String
  passwordHash  String
  updatedAt     DateTime       @updatedAt
  analytics     Analytics[]
  comments      Comment[]
  uploads       FileUpload[]
  notifications Notification[]
  posts         Post[]

  @@map("users")
}

model Post {
  id          String     @id @default(cuid())
  title       String
  content     String
  slug        String     @unique
  authorId    String
  createdAt   DateTime   @default(now())
  publishedAt DateTime?
  updatedAt   DateTime   @updatedAt
  status      PostStatus @default(DRAFT)
  comments    Comment[]
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories  Category[] @relation("CategoryToPost")
  tags        Tag[]      @relation("PostToTag")

  @@map("posts")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]   @relation("CategoryToPost")

  @@map("categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  posts     Post[]   @relation("PostToTag")

  @@map("tags")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  authorId  String
  createdAt DateTime  @default(now())
  parentId  String?
  postId    String
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model FileUpload {
  id           String   @id @default(cuid())
  filename     String
  size         Int
  path         String
  createdAt    DateTime @default(now())
  mimeType     String
  originalName String
  uploadedById String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id], onDelete: Cascade)

  @@map("file_uploads")
}

model Analytics {
  id        String   @id @default(cuid())
  page      String
  action    String
  metadata  String?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analytics")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  createdAt DateTime         @default(now())
  isRead    Boolean          @default(false)
  userId    String
  type      NotificationType @default(INFO)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string")

  @@map("settings")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
} 